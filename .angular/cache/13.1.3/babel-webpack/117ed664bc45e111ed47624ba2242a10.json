{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport * as i1 from 'ngx-progressbar';\nconst NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');\n\nclass NgProgressInterceptor {\n  constructor(ngProgress, config) {\n    this.ngProgress = ngProgress;\n    this._inProgressCount = 0;\n    this._config = {\n      id: 'root',\n      silentApis: []\n    };\n    this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;\n  }\n\n  intercept(req, next) {\n    // Ignore by request headers\n    if (req.headers.has('ignoreProgressBar')) {\n      return next.handle(req.clone({\n        headers: req.headers.delete('ignoreProgressBar')\n      }));\n    } // Ignore silent api requests\n\n\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n    this._progressRef = this.ngProgress.ref(this._config.id);\n\n    if (!this._progressRef.isStarted) {\n      this._progressRef.start();\n    }\n\n    return next.handle(req).pipe(finalize(() => {\n      this._inProgressCount--;\n\n      if (this._inProgressCount === 0) {\n        this._progressRef.complete();\n      }\n    }));\n  }\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n\n\n  checkUrl(req) {\n    const url = req.url.toLowerCase();\n\n    const found = this._config.silentApis.find(u => url.startsWith(u));\n\n    return !!found;\n  }\n\n}\n\nNgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) {\n  return new (t || NgProgressInterceptor)(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8));\n};\n\nNgProgressInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgProgressInterceptor,\n  factory: NgProgressInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.NgProgress\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_HTTP_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nclass NgProgressHttpModule {\n  static withConfig(config) {\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [{\n        provide: NG_PROGRESS_HTTP_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgProgressHttpModule.ɵfac = function NgProgressHttpModule_Factory(t) {\n  return new (t || NgProgressHttpModule)();\n};\n\nNgProgressHttpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgProgressHttpModule\n});\nNgProgressHttpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: NgProgressInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressHttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: HTTP_INTERCEPTORS,\n        useClass: NgProgressInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule };","map":{"version":3,"sources":["/home/diamsco/Bureau/real-estate/node_modules/ngx-progressbar/fesm2015/ngx-progressbar-http.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","NgModule","HTTP_INTERCEPTORS","finalize","i1","NG_PROGRESS_HTTP_CONFIG","NgProgressInterceptor","constructor","ngProgress","config","_inProgressCount","_config","id","silentApis","Object","assign","intercept","req","next","headers","has","handle","clone","delete","checkUrl","_progressRef","ref","isStarted","start","pipe","complete","url","toLowerCase","found","find","u","startsWith","ɵfac","NgProgress","ɵprov","type","undefined","decorators","args","NgProgressHttpModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","useClass","multi"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport * as i1 from 'ngx-progressbar';\n\nconst NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');\n\nclass NgProgressInterceptor {\n    constructor(ngProgress, config) {\n        this.ngProgress = ngProgress;\n        this._inProgressCount = 0;\n        this._config = {\n            id: 'root',\n            silentApis: []\n        };\n        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;\n    }\n    intercept(req, next) {\n        // Ignore by request headers\n        if (req.headers.has('ignoreProgressBar')) {\n            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));\n        }\n        // Ignore silent api requests\n        if (this.checkUrl(req)) {\n            return next.handle(req);\n        }\n        this._inProgressCount++;\n        this._progressRef = this.ngProgress.ref(this._config.id);\n        if (!this._progressRef.isStarted) {\n            this._progressRef.start();\n        }\n        return next.handle(req).pipe(finalize(() => {\n            this._inProgressCount--;\n            if (this._inProgressCount === 0) {\n                this._progressRef.complete();\n            }\n        }));\n    }\n    /**\n     * Check if request is silent.\n     * @param req request\n     */\n    checkUrl(req) {\n        const url = req.url.toLowerCase();\n        const found = this._config.silentApis.find((u) => url.startsWith(u));\n        return !!found;\n    }\n}\nNgProgressInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor, deps: [{ token: i1.NgProgress }, { token: NG_PROGRESS_HTTP_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNgProgressInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1.NgProgress }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NG_PROGRESS_HTTP_CONFIG]\n                    }] }];\n    } });\n\nclass NgProgressHttpModule {\n    static withConfig(config) {\n        return {\n            ngModule: NgProgressHttpModule,\n            providers: [\n                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\n            ]\n        };\n    }\n}\nNgProgressHttpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgProgressHttpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule });\nNgProgressHttpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule };\n"]},"metadata":{},"sourceType":"module"}